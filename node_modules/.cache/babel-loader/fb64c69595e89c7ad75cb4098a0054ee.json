{"ast":null,"code":"var _jsxFileName = \"/Users/raheemajannah/Documents/Traineeship/Full Stack Engineer/Projects/react-calculator-app/calculator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from 'react';\n/*\n when cleaning up code and sorting redux, maybe need to move all these functions \n into components folder and turn them into function components\n */\n//should i create a test for this??\n\n/*fix issue:\nafter one calculation, doesnt work if you want to put more numbers in - something wrong with else if block\nafter a calculation has completed and new button is pressed, make it start over not add onto the end\n*/\n//add +/- button\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentCalculation, setCurrentCalculation] = useState(\"\");\n  const [previousCalculation, setPreviousCalculation] = useState(\"\");\n  const operators = ['-', '+', '÷', '×', '%'];\n  let expression = \"\";\n  let computedValue;\n\n  const clear = () => {\n    setCurrentCalculation(0);\n    setPreviousCalculation(0);\n  };\n\n  const deleteLastDigit = () => {\n    setCurrentCalculation(currentCalculation.slice(0, -1));\n  };\n  /*\n  code functionality idea for +/- button\n  const changeSign = () => {\n      parseInt(currentCalculation) < 0 ? setCurrentCalculation(-Math.abs(currentCalculation)) : setCurrentCalculation(Math.abs(currentCalculation))\n  }*/\n\n\n  const addDigits = newDigit => {\n    if (currentCalculation === 0) {\n      setCurrentCalculation(newDigit);\n    } else if (previousCalculation !== null) {\n      setCurrentCalculation(newDigit);\n    } else if (currentCalculation.includes('.') && newDigit === '.') {\n      return;\n    } else if (currentCalculation === 0 && newDigit === '.') {\n      setCurrentCalculation(\"0\" + newDigit);\n    } else {\n      setCurrentCalculation(currentCalculation + newDigit);\n    }\n  };\n  /*this checks if the new digit entered is an operatio and if it is, \n  puts the old digit and the operator into the previousCalculation \n  and then zeros the current calc\n  */\n\n\n  const addOperator = newDigit => {\n    if (operators.includes(newDigit)) {\n      setPreviousCalculation(currentCalculation + \" \" + newDigit);\n    }\n  };\n  /*this sets the previous calcuation to our full expression*/\n\n\n  const onEquals = () => {\n    expression = previousCalculation + \" \" + currentCalculation;\n\n    if (expression.includes('÷')) {\n      computedValue = previousCalculation.slice(0, -1) / currentCalculation;\n      setCurrentCalculation(computedValue);\n    } else if (expression.includes('×')) {\n      setCurrentCalculation(previousCalculation.slice(0, -1) * currentCalculation);\n    } else if (expression.includes('+')) {\n      setCurrentCalculation(parseFloat(previousCalculation.slice(0, -1)) + parseFloat(currentCalculation));\n    } else if (expression.includes('-')) {\n      setCurrentCalculation(previousCalculation.slice(0, -1) - currentCalculation);\n    } else if (expression.includes('%')) {\n      setCurrentCalculation(previousCalculation.slice(0, -1) % currentCalculation);\n    }\n\n    setPreviousCalculation(expression);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outputPanel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"previousCalculation\",\n        children: previousCalculation || null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentCalculation\",\n        children: currentCalculation || \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => clear(),\n      children: \"AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => deleteLastDigit(),\n      children: \"DEL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addOperator('%'),\n      children: \"%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addOperator('÷'),\n      className: \"operators\",\n      children: \"\\xF7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('7'),\n      children: \"7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('8'),\n      children: \"8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('9'),\n      children: \"9\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addOperator('×'),\n      className: \"operators\",\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('4'),\n      children: \"4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('5'),\n      children: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('6'),\n      children: \"6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addOperator('-'),\n      className: \"operators\",\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('1'),\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('2'),\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('3'),\n      children: \"3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addOperator('+'),\n      className: \"operators\",\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"largerButtons\",\n      onClick: () => addDigits('0'),\n      children: \"0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addDigits('.'),\n      children: \".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onEquals(),\n      className: \"operators\",\n      children: \"=\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"Vg8Iqa/1SGH8wTE2QjnP6ibU97I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","currentCalculation","setCurrentCalculation","previousCalculation","setPreviousCalculation","operators","expression","computedValue","clear","deleteLastDigit","slice","addDigits","newDigit","includes","addOperator","onEquals","parseFloat"],"sources":["/Users/raheemajannah/Documents/Traineeship/Full Stack Engineer/Projects/react-calculator-app/calculator/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState } from 'react';\n\n/*\n when cleaning up code and sorting redux, maybe need to move all these functions \n into components folder and turn them into function components\n */\n//should i create a test for this??\n/*fix issue:\nafter one calculation, doesnt work if you want to put more numbers in - something wrong with else if block\nafter a calculation has completed and new button is pressed, make it start over not add onto the end\n*/\n//add +/- button\n\nfunction App(){\n    const[currentCalculation, setCurrentCalculation] = useState(\"\")\n    const[previousCalculation, setPreviousCalculation] = useState(\"\")\n    const operators = ['-', '+', '÷', '×', '%'];\n    let expression = \"\";\n    let computedValue;\n\n    const clear = () => {\n        setCurrentCalculation(0);\n        setPreviousCalculation(0);\n    }\n\n    const deleteLastDigit = () => {\n        setCurrentCalculation(currentCalculation.slice(0, -1))\n    }\n  \n    /*\n    code functionality idea for +/- button\n    const changeSign = () => {\n        parseInt(currentCalculation) < 0 ? setCurrentCalculation(-Math.abs(currentCalculation)) : setCurrentCalculation(Math.abs(currentCalculation))\n    }*/\n    const addDigits = (newDigit) => {\n        if(currentCalculation === 0){\n            setCurrentCalculation(newDigit);\n        }\n        else if(previousCalculation !== null){\n            setCurrentCalculation(newDigit);\n        }\n        else if(currentCalculation.includes('.') && newDigit==='.'){\n            return;\n        }\n        else if(currentCalculation === 0 && newDigit==='.'){\n            setCurrentCalculation(\"0\" + newDigit);\n        }\n        else{\n            setCurrentCalculation(currentCalculation + newDigit);\n        }\n    }\n\n    /*this checks if the new digit entered is an operatio and if it is, \n    puts the old digit and the operator into the previousCalculation \n    and then zeros the current calc\n    */\n    const addOperator = (newDigit) => {\n        if (operators.includes(newDigit)) {\n            setPreviousCalculation(currentCalculation + \" \" + newDigit);\n        }\n    }\n    /*this sets the previous calcuation to our full expression*/\n    const onEquals = () => {\n        expression = previousCalculation + \" \" + currentCalculation;\n        if(expression.includes('÷')){\n            computedValue = previousCalculation.slice(0, -1)/currentCalculation;\n            setCurrentCalculation(computedValue);\n        }\n        else if(expression.includes('×')){\n            setCurrentCalculation(previousCalculation.slice(0, -1)*currentCalculation)\n        }\n        else if(expression.includes('+')){\n            setCurrentCalculation(parseFloat(previousCalculation.slice(0, -1))+parseFloat(currentCalculation))\n        }\n        else if(expression.includes('-')){\n            setCurrentCalculation(previousCalculation.slice(0, -1)-currentCalculation)\n        }\n        else if(expression.includes('%')){\n            setCurrentCalculation(previousCalculation.slice(0, -1)%currentCalculation)\n        }\n        setPreviousCalculation(expression);\n    }\n\n    return (\n        <div className=\"calculator\"> \n            <div className=\"outputPanel\">\n                <div className=\"previousCalculation\">{previousCalculation || null}</div>\n                <div className=\"currentCalculation\">{currentCalculation || \"0\"}</div> \n            </div>\n            <button onClick={() => clear()}>AC</button>\n            <button onClick={() => deleteLastDigit()}>DEL</button>\n            <button onClick={() => addOperator('%')}>%</button>\n            <button onClick={() => addOperator('÷')} className=\"operators\">÷</button>\n            <button onClick={() => addDigits('7')}>7</button>\n            <button onClick={() => addDigits('8')}>8</button>\n            <button onClick={() => addDigits('9')}>9</button>\n            <button onClick={() => addOperator('×')} className=\"operators\">×</button>\n            <button onClick={() => addDigits('4')}>4</button>\n            <button onClick={() => addDigits('5')}>5</button>\n            <button onClick={() => addDigits('6')}>6</button>\n            <button onClick={() => addOperator('-')} className=\"operators\">-</button>\n            <button onClick={() => addDigits('1')}>1</button>\n            <button onClick={() => addDigits('2')}>2</button>\n            <button onClick={() => addDigits('3')}>3</button>\n            <button onClick={() => addOperator('+')} className=\"operators\">+</button>\n            <button className=\"largerButtons\" onClick={() => addDigits('0')}>0</button>\n            <button onClick={() => addDigits('.')}>.</button>\n            <button onClick={() => onEquals()} className=\"operators\">=</button>\n        </div>\n    )\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module"}